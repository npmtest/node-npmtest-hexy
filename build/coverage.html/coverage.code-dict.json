{"/home/travis/build/npmtest/node-npmtest-hexy/test.js":"/* istanbul instrument in package npmtest_hexy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hexy/lib.npmtest_hexy.js":"/* istanbul instrument in package npmtest_hexy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hexy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hexy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hexy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hexy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hexy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hexy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hexy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hexy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hexy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hexy.__dirname + '/lib.npmtest_hexy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hexy/node_modules/hexy/hexy.js":"// # hexy.js -- utility to create hex dumps \n// \n// `hexy` is a javascript library that's easy to use to create hex dumps. It\n// works well in node and has cursory browser (more below) support. It contains a\n// number of options to configure how the hex dump will end up looking.\n// \n// It should create a pleasant looking hex dumb by default:\n//     \n//     var hexy = require('hexy'),\n//            b = new Buffer(\"\\000\\001\\003\\005\\037\\012\\011bcdefghijklmnopqrstuvwxyz0123456789\")\n//             // or String or Array containing numbers ( bytes, i.e. < 0xFF )\n//     \n//     console.log(hexy.hexy(b))\n// \n// results in this dump:\n// \n//     00000000: 0001 0305 1f0a 0962 6364 6566 6768 696a  .......bcdefghij\n//     00000010: 6b6c 6d6e 6f70 7172 7374 7576 7778 797a  klmnopqrstuvwxyz\n//     00000020: 3031 3233 3435 3637 3839                 0123456789\n// \n// but it's also possible to configure:\n// \n//   * Line numbering\n//   * Line width\n//   * Format of byte grouping\n//   * Case of hex decimals\n//   * Presence of the ASCII annotation in the right column.\n// \n// This means it's easy to generate exciting dumps like:\n// \n//     0000000: 0001 0305 1f0a 0962  .... ...b \n//     0000008: 6364 6566 6768 696a  cdef ghij \n//     0000010: 6b6c 6d6e 6f70 7172  klmn opqr \n//     0000018: 7374 7576 7778 797a  stuv wxyz \n//     0000020: 3031 3233 3435 3637  0123 4567 \n//     0000028: 3839                 89\n// \n// or even:\n// \n//     0000000: 00 01 03 05 1f 0a 09 62   63 64 65 66 67 68 69 6a \n//     0000010: 6b 6c 6d 6e 6f 70 71 72   73 74 75 76 77 78 79 7a \n//     0000020: 30 31 32 33 34 35 36 37   38 39\n// \n// with hexy!\n// \n// ## Accepted Input\n// \n// Currently, input should be one of the following:\n// \n//   - a `Buffer`\n//   - a `String`\n//   - an `Array` containing `Number`s. These should fit into\n//     8 bits, i.e. be smaller than 255. Larger values are truncated\n//     (specifically `val & 0xff`)\n// \n// ## Formatting Options\n// \n// Formatting options are configured by passing a `format` object to the `hexy` function:\n// \n//     var format = {}\n//         format.width = width // how many bytes per line, default 16\n//         format.numbering = n // [\"hex_bytes\" | \"none\"],  default \"hex_bytes\"\n//         format.format = f    // [\"fours\"|\"twos\"|\"none\"], how many nibbles per group\n//                              //                          default \"fours\"\n//         format.caps = c      // [\"lower\"|\"upper\"],       default lower\n//         format.annotate=a    // [\"ascii\"|\"none\"], ascii annotation at end of line?\n//                              //                          default \"ascii\"\n//         format.prefix=p      // <string> something pretty to put in front of each line\n//                              //                          default \"\"\n//         format.indent=i      // <num> number of spaces to indent\n//                              //                          default 0\n//         format.html=true     // funky html divs 'n stuff! experimental.\n//                              //                          default: false\n// \n//     console.log(hexy.hexy(buffer, format))\n// \n// In case you're really nerdy, you'll have noticed that the defaults correspond\n// to how `xxd` formats it's output.\n//            \n// \n// ## Installing\n// \n// Either use `npm`:\n//   \n//     npm install hexy\n// \n// This will install the lib which you'll be able to use like so:\n//     \n//     var hexy = require(\"hexy\"),\n//         buf  = // get Buffer from somewhere,\n//         str  = hexy.hexy(buf)\n// \n// It will also install `hexy` into your path in case you're totally fed up\n// with using `xxd`.\n//         \n//  \n// If you don't like `npm`, grab the source from github:\n// \n//     http://github.com/a2800276/hexy.js\n// \n// ## Browser Support\n// \n// Basically eveything should work fine in the browser as well, just\n// include hexy.js in a script tag, and you'll get `hexy` and `Hexy` stuck\n// to the global object (window).\n// \n// Some caveats: \"Works fine on my system™\". Browser support is 'new' and\n// not thoroughly tested (... eh, only on chrome [Version: whatever I'm\n// currently running]). Under node, I can generally assume that binary data\n// is passed in in a sane fashion using buffers, but plain old Javascript\n// doesn't really have any datatypes that can handle bytes gracefully.\n// Currently only Strings and arrays containing Number'ish values are\n// supported, I'd like to add numeric and typed arrays more explicitly.\n// \n// Let me know in case you run into any issues, I'd be happy to find out\n// about them.\n// \n// ## TODOS\n// \n// The current version only pretty prints node.js Buffers, and JS Strings\n// and Arrays. This should be expanded to also do typed arrays,\n// Streams/series of Buffers which would be nice so you don't have to\n// collect the whole things you want to pretty print in memory, and such.\n// \n// I'd like to improve html rendering, e.g. to be able to mouse over the\n// ascii annotation and highlight the hex byte and vice versa, improve\n// browser integration and set up a proper build & packaging system.\n// \n// Better testing for browser use.\n// \n//  \n// ## Thanks\n// \n// * Thanks to Isaac Schlueter [isaacs] for gratiously lending a hand and\n// cheering me up.\n// * dodo (http://coderwall.com/dodo)\n// * the fine folks at [Travis](http://travis-ci.org/a2800276/hexy.js)\n// * radare (https://github.com/radare)\n// * Michele Caini (https://github.com/skypjack)\n// \n// ## History\n// \n// This is a fairly straightforward port of `hexy.rb` which does more or less the\n// same thing. You can find it here: \n//  \n//     http://github.com/a2800276/hexy\n//  \n// in case these sorts of things interest you.\n// \n// ## Mail\n// \n// In case you discover bugs, spelling errors, offer suggestions for\n// improvements or would like to help out with the project, you can contact\n// me directly (tim@kuriositaet.de). \n\n(function (arg) {\n\nvar hexy = function (buffer, config) {\n  var h = new Hexy(buffer, config)\n  return h.toString()\n}\n\nvar Hexy = function (buffer, config) {\n  var self = this\n  \n  if (typeof Buffer !== 'undefined') {\n    buffer = (Buffer.isBuffer(buffer) && buffer) \n      || (typeof buffer === 'string' && new Buffer(buffer)) \n      || (buffer && (buffer.constructor === Array) && new Buffer(buffer)) // accept num arrays\n      || new Buffer(0)\n  }\n  buffer = buffer || []\n  config = config || {}\n \n  self.buffer    = buffer // magic string conversion here?\n  self.width     = parseInt(config.width) || 16\n  self.numbering = config.numbering == \"none\"  ? \"none\" : \"hex_bytes\"\n   \n  switch (config.format) {\n    case \"none\":\n    case \"twos\":\n      self.format = config.format\n      break\n    default:\n      self.format = \"fours\"\n  }\n  \n  self.caps        = config.caps        == \"upper\" ? \"upper\" : \"lower\"\n  self.annotate    = config.annotate    == \"none\"  ? \"none\"  : \"ascii\"\n  self.prefix      = config.prefix      || \"\"\n  self.indent      = config.indent      || 0\n  self.html        = config.html        || false\n  self.offset      = config.offset      || 0\n  self.length      = config.length      || -1\n  \n  self.display_offset = config.display_offset || 0\n\n  if (self.offset) {\n    if (self.offset < self.buffer.length) {\n      self.buffer = self.buffer.slice(self.offset)\n    }\n  }\n\n  if (self.length !== -1) {\n    if (self.length <= self.buffer.length) {\n      self.buffer = self.buffer.slice(0,self.length)\n    }\n  }\n\n  for (var i = 0; i!=self.indent; ++i) {\n    self.prefix = \" \"+self.prefix\n  }\n\n  var pos = 0\n\n  this.toString = function () {\n    var str = \"\"\n    \n    if (self.html) { str += \"<div class='hexy'>\\n\"}\n    //split up into line of max `self.width`\n    var line_arr = lines()\n    \n    //lines().forEach(function(hex_raw, i)\n    for (var i = 0; i!= line_arr.length; ++i) {\n      var hex_raw = line_arr[i],\n          hex = hex_raw[0],\n          raw = hex_raw[1]\n      //insert spaces every `self.format.twos` or fours\n      var howMany = hex.length\n      if (self.format === \"fours\") {\n        howMany = 4\n      } else if (self.format === \"twos\") {\n        howMany = 2\n      }\n\n      var hex_formatted = \"\"\n\n\n      for (var j =0; j< hex.length; j+=howMany) {\n        var s = hex.substr(j, howMany)\n        hex_formatted += s + \" \"\n      } \n\n      var addr = (i*self.width)+self.offset+self.display_offset;\n      if (self.html) {\n        odd = i%2 == 0 ? \" even\" : \"  odd\"\n        str += \"<div class='\"+pad(addr, 8)+odd+\"'>\"\n      }\n      str += self.prefix \n\n      if (self.numbering === \"hex_bytes\") {\n        str += pad(addr, 8) // padding...\n        str += \": \"\n      }\n      \n      var padlen = 0\n      switch(self.format) {\n        case \"fours\":\n          padlen = self.width*2 + Math.floor(self.width/2)\n          break\n        case \"twos\":\n          padlen = self.width*3 + 2\n          break\n        default:\n          padlen = self.width * 2 + 1\n      }\n\n      str += rpad(hex_formatted, padlen)\n      if (self.annotate === \"ascii\") {\n        str+=\" \"\n        var ascii = raw.replace(/[\\000-\\040\\177-\\377]/g, \".\")\n        if (self.html) {str += escape(ascii)}\n        else { str += ascii }\n      }\n      if (self.html) {\n        str += \"</div>\\n\"\n      } else {\n      str += \"\\n\"\n      } \n    }\n    if (self.html) { str += \"</div>\\n\"}\n    return str\n  }\n\n  var lines = function() {\n    var hex_raw = []\n    for (var i = 0; i<self.buffer.length ; i+=self.width) {\n      var begin = i,\n          end   = i+self.width >= self.buffer.length ? self.buffer.length : i+self.width,\n          slice = self.buffer.slice(begin, end),\n          hex   = self.caps === \"upper\" ? hexu(slice) : hexl(slice),\n          raw   = slice.toString('ascii')\n      \n      if (self.buffer.constructor == Array) {\n        raw = String.fromCharCode.apply(self, slice)\n      }\n      hex_raw.push([hex,raw])\n    }\n    return hex_raw\n\n  }\n\n  var hexl = function (buffer) {\n    var str = \"\"\n    for (var i=0; i!=buffer.length; ++i) {\n      if (buffer.constructor == String) {\n        str += pad(buffer.charCodeAt(i), 2)\n      } else {\n        str += pad(buffer[i], 2)\n      }\n    }\n    return str\n  }\n  var hexu = function (buffer) {\n    return hexl(buffer).toUpperCase()\n  }\n\n  var pad = function(b, len) {\n    var s = b.toString(16)\n    \n    while (s.length < len) {\n      s = \"0\" + s\n    }\n    return s\n  } \n  var rpad = function(s, len) {\n    for (var n = len - s.length; n>0; --n) {\n      if (self.html) {\n        s += \"&nbsp;\"\n      } else {\n        s += \" \"\n      }\n    \n    }\n    return s\n  }\n\n  var escape = function (str) {\n    str = str.split(\"&\").join(\"&amp;\")\n    str = str.split(\"<\").join(\"&lt;\")\n    str = str.split(\">\").join(\"&gt;\")\n    return str\n  }\n  \n\n}\n\n\n// This is probably not the prettiest or coolest way to to determine runtime\n// environment. It seems to work and Im not up to the task figuring out what\n// the module system du jour is and how to interface with it ...\n\n// If anyone wants to fix this to include this module \"properly\", I'm more than\n// happy to incorporate any fixes...\n\nvar _exp\nif (typeof exports !== \"undefined\") {\n  _exp = exports\n} else if (arg === window) {\n  _exp = window\n} else {\n  // who knows?\n  _exp = arg // or this or somethings. ...\n}\n_exp.hexy = hexy\n_exp.Hexy = Hexy\n\n})(this)\n","/home/travis/build/npmtest/node-npmtest-hexy/node_modules/hexy/bin/hexy_cmd.js":"#!/usr/bin/env node\n\nvar hexy = require(\"../hexy.js\"),\n    fs   = require(\"fs\")\n\nfunction usage (mes) {\n  console.log(mes)\n  console.log(\"usage bla bal bal\");\n  console.log(\"--width     [(16)]              how many bytes per line\")\n  console.log(\"--numbering [(hex_bytes)|none]  prefix current byte count\")\n  console.log(\"--format    [(fours)|twos|none] how many nibbles per group\")\n  console.log(\"--caps      [(lower)|upper]     case of hex chars\")\n  console.log(\"--annotate  [(ascii)|none]      provide ascii annotation\")\n  console.log(\"--prefix    [(\\\"\\\")|<prefix>]     printed in front of each line\")\n  console.log(\"--indent    [(0)|<num>]         number of spaces to indent output\")\n  console.log(\"parameter in (parens) are default\")\n  process.exit(1)\n}\n\nfunction existsFatal(fn) {\n  try {\n    var stat = fs.statSync(fn)\n    if (stat.isFile()) {\n      return;\n    } \n  } catch (e) {}\n  usage(\"not a file: \"+fn)\n}\nfunction handleArgs () {\n  var format = {}, \n      ARGS = [\n      \"--width\",\n      \"--numbering\",\n      \"--format\",\n      \"--caps\",\n      \"--annotate\",\n      \"--prefix\",\n      \"--indent\",\n      ]\n\n  var args = process.argv,\n      last = -1\n\n  for (var i=2; i<args.length; ++i) {\n    var arg = args[i]\n    if (\"--help\" === arg) {\n      usage()\n    }\n    if ( -1 === ARGS.indexOf(arg) ) {\n      // not a valid flag\n      if (args.length-1 === i) {\n        //last arg, could be filename\n        existsFatal(arg)\n        format.filename = arg\n        break;\n      } else {\n        usage()\n      }\n    }\n    arg = arg.substr(2, arg.length)\n    format[arg] = args[++i] \n    \n  }\n\n  if (format.width) {\n    format.width = parseInt(format.width, 10)\n  }\n  if (format.indent) {\n    format.indent = parseInt(format.indent, 10)\n  }\n  return format\n}\n\n/************************************************************************\n * MAIN ***************************************************************** \n************************************************************************/\n\nvar format = handleArgs(),\n    buffer = null,\n    str    = null\n\nif (format.filename) {\n  buffer = fs.readFileSync(format.filename)\n  console.log(hexy.hexy(buffer, format))\n} else {\n  var stdin = process.openStdin()\n      stdin.on(\"data\", function(data) {\n        var offset = 0\n        if (buffer) {\n          offset = buffer.length\n          buffer_ = new Buffer(buffer.length + data.length)\n          buffer.copy(buffer_,0,0)\n          buffer = buffer_\n          data.copy(buffer, offset, data.length)\n        } else {\n          buffer = data \n        }\n      })\n\n      stdin.on(\"end\", function(){\n        console.log(hexy.hexy(buffer, format))\n      }) \n}\n\n\n"}